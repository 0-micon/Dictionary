selector
	1. The element Selector
		selects elements based on the element name.
		p { text-align: center; color: red; }
	2. The id Selector
		uses the id attribute of an HTML element to select a specific element.
	To select an element with a specific id, write a hash (#) character, followed by the id of the element.
		#para1 { text-align: center; color: red; }
	Note: An id name cannot start with a number!
	3. The class Selector
		selects elements with a specific class attribute.
	To select elements with a specific class, write a period (.) character, followed by the name of the class.
		.center { text-align: center; color: red; }
	You can also specify that only specific HTML elements should be affected by a class.
		p.center { text-align: center; color: red; }
	HTML elements can also refer to more than one class.
		<p class="center large">This paragraph refers to two classes.</p>
	Note: A class name cannot start with a number!
	4. Grouping Selectors
	To group selectors, separate each selector with a comma.
		h1, h2, p { text-align: center; color: red; }
comment
	A CSS comment starts with /* and ends with */. Comments can also span multiple lines.
		p { color: red; /* This is a comment */ text-align: center; }
link
	1. External Style Sheet
	A page must include a reference to the external CSS-file inside the <link> element. The <link> element goes inside the <head> section.
		<head><link rel="stylesheet" type="text/css" href="mystyle.css"></head>
	The CSS-file should not contain any html tags. The style sheet file must be saved with a .css extension.
	2. Internal Style Sheet
	Internal styles are defined within the <style> element, inside the <head> section of an HTML page.
		<head><style>body { background-color: linen; }</style></head>
	3. Inline Styles
	To use inline styles, add the style attribute to the relevant element. The style attribute can contain any CSS property.
		<h1 style="color:blue;margin-left:30px;">This is a heading.</h1>
	Tip: An inline style loses many of the advantages of a style sheet (by mixing content with presentation). Use this method sparingly!
	4. Multiple Style Sheets
	If some properties have been defined for the same selector (element) in different style sheets, the value from the last read style sheet will be used.
	Generally speaking we can say that all the styles will "cascade" into a new "virtual" style sheet by the following rules, where number one has the highest priority:
	1) Inline style (inside an HTML element)
	2) External and internal style sheets (in the head section)
	3) Browser default
	So, an inline style (inside a specific HTML element) has the highest priority, which means that it will override a style defined inside the <head> tag, or in an external style sheet, or a browser default value.
color
	1. Color Names
	HTML and CSS supports 140 standard color names.
		http://www.w3schools.com/colors/colors_names.asp
	Note: Color names are case-insensitive: "Red" is the same as "red" or "RED".
	2. RGB (Red, Green, Blue)
	Each parameter (red, green, blue) defines the intensity of the color between 0 and 255.
		rgb(255,255,0) is displayed as yellow
	3. Hexadecimal Colors
	RGB values are specified using hexadecimal color values in the form: #RRGGBB, where RR (red), GG (green) and BB (blue) are hexadecimal values between 00 and FF (same as decimal 0-255).
		#FF0000 is displayed as red
	Note: HEX values are case-insensitive: "#ff0000" is the same as "FF0000".
	4. CSS3 Colors
	CSS3 introduces: RGBA colors, HSL colors, HSLA colors, opacity.
	1) RGBA color values are an extension of RGB color values with an alpha channel - which specifies the opacity for a color. The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (fully opaque).
		#p1 { background-color: rgba(255, 0, 0, 0.3); }  /* red with opacity */
	2) HSL(hue, saturation, lightness). Hue is a degree on the color wheel from 0 to 360 (0 (or 360) is red, 120 is green, 240 is blue); Saturation is a percentage value: 100% is the full color. Lightness is also a percentage; 0% is dark (black) and 100% is white.
		#p2 { background-color: hsl(120, 100%, 75%); }  /* light green */
	3) HSLA color values are an extension of HSL color values with an alpha channel - which specifies the opacity for a color.
		#p3 { background-color: hsla(120, 100%, 25%, 0.3); }  /* dark green with opacity */
	4) The CSS3 opacity property sets the opacity for a specified RGB value. It must be a number between 0.0 (fully transparent) and 1.0 (fully opaque).
		#p3 { background-color:rgb(0,0,255); opacity:0.6; }  /* blue with opacity */
background
	1. Background Color
	The background-color property specifies the background color of an element.
		body { background-color: lightblue; }
	2. Background Image
	The background-image property specifies an image to use as the background of an element.
		body { background-image: url("paper.gif"); }
	By default, the image is repeated so it covers the entire element. To repeat an image vertically, set background-repeat: repeat-y; To show the background image only once, set background-repeat: no-repeat;
	The position of the image is specified by the background-position property.
		body { background-image: url("tree.png"); background-repeat: no-repeat; background-position: right top; }
	To specify that the background image should be fixed (will not scroll with the rest of the page), use the background-attachment property.
		body { background-image: url("tree.png"); background-repeat: no-repeat; background-position: right top; background-attachment: fixed; }
	To shorten the code, it is also possible to specify all the background properties in one single property. This is called a shorthand property. The shorthand property for background is background.
		body { background: #ffffff url("tree.png") no-repeat right top; }
	When using the shorthand property the order of the property values is:
	1) background-color,
	2) background-image,
	3) background-repeat,
	4) background-attachment,
	5) background-position
	It does not matter if one of the property values is missing, as long as the other ones are in this order.
border
	1. Border Style
	The border-style property specifies what kind of border to display. The following values are allowed: dotted, dashed, solid, double, groove, ridge, inset, outset, none, hidden.
	When using the border-style property the order of the border sides is:
	1) one value: (top and right and bottom and left);
		p.one {border-style: dotted;}
	2) two values: (top and bottom), (right and left);
		p.two {border-style: dotted dashed;}
	3) three values: top, (right and left), bottom;
		p.three {border-style: dotted dashed solid;}
	4) four values: top, right, bottom, left.
		p.mix {border-style: dotted dashed solid double;}
	2. Border Width
	The border-width property specifies the width of the four borders. The width can be set as a specific size (in px, pt, cm, em, etc) or by using one of the three pre-defined values: thin, medium, or thick. The border-width property can have from one to four values (top, right, bottom, left).
		p.three { border-style: solid; border-width: 2px 10px 4px 20px; }
	3. Border Color
	The border-color property is used to set the color of the four borders. The border-color property can have from one to four values (top, right, bottom, left). If border-color is not set, it inherits the color of the element.
		p.three { border-style: solid; border-color: red green blue yellow; }
	4. Individual Sides
	In CSS, there is also properties for specifying each of the borders (top, right, bottom, and left): border-top-style, border-right-style, border-bottom-style, border-left-style.
		p { border-style: dotted solid; }
	5. Shorthand Property
	To shorten the code, it is also possible to specify all the individual border properties in one property. The border property is a shorthand property for the following individual border properties:
	1) border-width,
	2) border-style (required),
	3) border-color
		p { border: 5px solid red; }
	You can also specify all the individual border properties for just one side.
		p { border-left: 6px solid red; }
		p { border-bottom: 6px solid red; }
	6. Rounded Borders
	The border-radius property is used to add rounded borders to an element.
		p { border: 2px solid red; border-radius: 5px; }
margin
	The margin properties set the size of the white space outside the border.
	There are CSS properties for setting the margin for each side of an element:
	1) margin-top,
	2) margin-right,
	3) margin-bottom,
	4) margin-left.
		p { margin-top: 5px; margin-bottom: 6px; margin-right: 5px; margin-left: 8px; }
	The margin property is a shorthand property.
		p { margin: 10px 15px 10px 80px; }
	How it works:
	1) one value: all four margins have that value;
	2) two values: (top and bottom), (right and left);
	3) three values: top, (right and left), bottom;
	4) four values: top, right, bottom, left;
	You can set the margin property to auto to horizontally center the element within its container.
		div { width: 300px; margin: auto; border: 1px solid red; }
	The margin may be inherited from the parent element.
		p.one { margin-left: inherit; }
	Note: Top and bottom margins of elements are sometimes collapsed into a single margin that is equal to the largest of the two margins. This does not happen on horizontal margins (left and right)! Only vertical margins (top and bottom)!
padding
	The padding clears an area around the content (inside the border) of an element.
	There are CSS properties for setting the padding for each side of an element:
	1) padding-top,
	2) padding-right,
	3) padding-bottom,
	4) padding-left.
		p { padding-top: 5px; padding-right: 3px; padding-bottom: 5px; padding-left: 8px; }
	The padding property is a shorthand property.
		p { padding: 50px 30px 50px 80px; }
	How it works:
	1) one value: all four paddings are that value;
	2) two values: (top and bottom), (right and left);
	3) three values: top, (right and left), bottom;
	4) four values: top, right, bottom, left;
		div { padding: 25px 50px 75px; }
	inherit - specifies that the padding should be inherited from the parent element.
		p.one { padding-left: inherit; }
height and width
	The height and width properties are used to set the height and width of an element.
	The height and width can be set to auto (this is default. Means that the browser calculates the height and width), or be specified in length values, like px, cm, etc., or in percent (%) of the containing block.
		div { height: 200px; width: 50%; background-color: powderblue; }
	Note: The height and width properties do not include padding, borders, or margins; they set the height/width of the area inside the padding, border, and margin of the element!
	The max-width property is used to set the maximum width of an element.
		div { max-width: 500px; height: 100px; }
	Note: The value of the max-width property overrides width.
box model
	All HTML elements can be considered as boxes. In CSS, the term "box model" is used when talking about design and layout. The CSS box model is essentially a box that wraps around every HTML element. It consists of: margins, borders, padding, and the actual content.
	The box model allows us to add a border around elements, and to define space between elements.
		div { width: 300px; border: 25px solid green; padding: 25px; margin: 25px; }
	The total width of an element should be calculated like this: Total element width = width + left padding + right padding + left border + right border + left margin + right margin
	The total height of an element should be calculated like this: Total element height = height + top padding + bottom padding + top border + bottom border + top margin + bottom margin
outline
	The CSS outline properties specify the style, color, and width of an outline. An outline is a line that is drawn around elements (outside the borders) to make the element "stand out". However, the outline property is different from the border property - The outline is NOT a part of an element's dimensions; the element's total width and height is not affected by the width of the outline.
	1. Outline Style
	The outline-style property specifies the style of the outline.
	It can have one of the following values: dotted, dashed, solid, double, groove, ridge, inset, outset, none, hidden.
		p { border: 1px solid black; outline-color: red; outline-style: double; }
	2. Outline Color
	The outline-color property is used to set the color of the outline. The color can be set by: name, RGB, Hex, invert - performs a color inversion (which ensures that the outline is visible, regardless of color background).
		p { border: 1px solid black; outline-style: double; outline-color: red; }
	3. Outline Width
	The outline-width property specifies the width of the outline. The width can be set as a specific size (in px, pt, cm, em, etc) or by using one of the three pre-defined values: thin, medium, or thick.
		p { border: 1px solid black; outline-style: double; outline-color: red; outline-width: thick; }
	4. Shorthand property
	The outline property is a shorthand property for the following individual outline properties:
	1) outline-width,
	2) outline-style (required),
	3) outline-color.
		p { border: 1px solid black; outline: 5px dotted red; }
text
	1. Text Color
	The color property is used to set the color of the text. The default text color for a page is defined in the body selector.
		body { color: blue; }
		h1 { color: green; }
	Note: For W3C compliant CSS: If you define the color property, you must also define the background-color.
	2. Text Alignment
	The text-align property is used to set the horizontal alignment of a text. A text can be left or right aligned, centered, or justified. When the text-align property is set to "justify", each line is stretched so that every line has equal width, and the left and right margins are straight (like in magazines and newspapers).
		h1 { text-align: center; }
		h2 { text-align: left; }
		h3 { text-align: right; }
		div { text-align: justify; }
	3. Text Decoration
	The text-decoration property is used to set or remove decorations from text. Values: none, overline, line-through, underline. The value text-decoration: none; is often used to remove underlines from links.
		a { text-decoration: none; }
	Note: It is not recommended to underline text that is not a link, as this often confuses the reader.
	4. Text Transformation
	The text-transform property is used to specify uppercase and lowercase letters in a text. It can be used to turn everything into uppercase or lowercase letters, or capitalize the first letter of each word. Values: uppercase, lowercase, capitalize.
		p.uppercase { text-transform: uppercase; }
		p.lowercase { text-transform: lowercase; }
		p.capitalize { text-transform: capitalize; }
	5. Text Indentation
	The text-indent property is used to specify the indentation of the first line of a text.
		p { text-indent: 50px; }
	6. Letter Spacing
	The letter-spacing property is used to specify the space between the characters in a text.
		h1 { letter-spacing: 3px; }
		h2 { letter-spacing: -3px; }
	7. Line Height
	The line-height property is used to specify the space between lines.
		p.small { line-height: 0.8; }
		p.big { line-height: 1.8; }
	8. Text Direction
	The direction property is used to change the text direction of an element.
		div { direction: rtl; }
	9. Word Spacing
	The word-spacing property is used to specify the space between the words in a text.
		h1 { word-spacing: 10px; }
		h2 { word-spacing: -5px; }
	10. CSS3 text-overflow
	It specifies how overflowed content that is not displayed should be signaled to the user. It can be clipped or it can be rendered as an ellipsis (...).
		p.test1 { white-space: nowrap; width: 200px; border: 1px solid #000000; overflow: hidden; text-overflow: clip; }
		p.test2 { white-space: nowrap; width: 200px; border: 1px solid #000000; overflow: hidden; text-overflow: ellipsis; }
	You can display the overflowed content when hovering over the element.
		div.test:hover { text-overflow: inherit; overflow: visible; }
	11. CSS3 word-wrap
	It allows long words to be able to be broken and wrap onto the next line.
		p { word-wrap: break-word; }
	12. CSS3 word-break
	It specifies line breaking rules.
		p.test1 { word-break: keep-all; }
		p.test2 { word-break: break-all; }
font
	In CSS, there are two types of font family names:
	1) generic family - a group of font families with a similar look (like "Serif" or "Monospace")
	a. Serif (Serif fonts have small lines at the ends on some characters);
	b. Sans-serif (These fonts do not have the lines at the ends of characters);
	c. Monospace (All characters have the same width);
	2) font family - a specific font family (like "Times New Roman", "Georgia", "Arial", "Verdana", "Courier New", or "Lucida Console")
	Note: On computer screens, sans-serif fonts are considered easier to read than serif fonts.
	1. Font Family
	The font family of a text is set with the font-family property.
	The font-family property should hold several font names as a "fallback" system. If the browser does not support the first font, it tries the next font, and so on. More than one font family is specified in a comma-separated list.
		p { font-family: "Times New Roman", Times, serif; }
	Note: If the name of a font family is more than one word, it must be in quotation marks, like: "Times New Roman".
	2. Font Style
	The font-style property is mostly used to specify italic text. This property has three values:
	1) normal
	2) italic
	3) oblique - The text is "leaning" (oblique is very similar to italic, but less supported)
		p.normal { font-style: normal; }
		p.italic { font-style: italic; }
	3. Font Size
	The font-size property sets the size of the text. The font-size value can be an absolute, or relative size.
	1) Absolute size:
	a. Sets the text to a specified size
	b. Does not allow a user to change the text size in all browsers (bad for accessibility reasons)
	c. Absolute size is useful when the physical size of the output is known
	2) Relative size:
	a. Sets the size relative to surrounding elements
	b. Allows a user to change the text size in browsers
	Note: If you do not specify a font size, the default size for normal text, like paragraphs, is 16px (16px=1em).
		p { font-size: 14px; }
	To allow users to resize the text (in the browser menu), use em instead of pixels. 1em is equal to the current font size. The default text size in browsers is 16px. So, the default size of 1em is 16px. The size can be calculated from pixels to em using this formula: pixels/16=em
		p { font-size: 0.875em; /* 14px/16=0.875em */ }
	The solution that works in all browsers, is to set a default font-size in percent for the <body> element:
		body { font-size: 100%; } p { font-size: 0.875em; }
	4. Font Weight
	The font-weight property specifies the weight of a font.
		p.normal { font-weight: normal; }
		p.thick { font-weight: bold; }
	5. Font Variant
	The font-variant property specifies whether or not a text should be displayed in a small-caps font. In a small-caps font, all lowercase letters are converted to uppercase letters. However, the converted uppercase letters appears in a smaller font size than the original uppercase letters in the text.
		p.normal { font-variant: normal; }
		p.small { font-variant: small-caps; }
	6. CSS3 @font-face rule
	It allows to use fonts that are not installed on the user's computer.
		@font-face { font-family: my_font; src: url(sansation_light.woff); } div { font-family: my_font; }
	@font-face descriptors:
	1) font-family:name; Required. Defines a name for the font;
	2) src:URL; Required. Defines the URL of the font file;
	3) font-stretch: normal, condensed, ultra-condensed, extra-condensed, semi-condensed, expanded, semi-expanded, extra-expanded, ultra-expanded; Optional. Defines how the font should be stretched. Default is "normal";
	4) font-style: normal, italic, oblique; Optional. Defines how the font should be styled. Default is "normal";
	5) font-weight: normal, bold, [100-900]; Optional. Defines the boldness of the font. Default is "normal";
	6) unicode-range: range; Optional. Defines the range of UNICODE characters the font supports. Default is "U+0-10FFFF";
hyperlink
	1. Styling Links
	Links can be styled with any CSS property (e.g. color, font-family, background, etc.).
		a { color: hotpink; }
	In addition, links can be styled differently depending on what state they are in. The four links states are:
	1) a:link - a normal, unvisited link
		a:link { color: red; }
	2) a:visited - a link the user has visited
		a:visited { color: green; }
	3) a:hover - a link when the user mouses over it
		a:hover { color: hotpink; }
	4) a:active - a link the moment it is clicked
		a:active { color: blue; }
	When setting the style for several link states, there are some order rules:
	1) a:hover MUST come after a:link and a:visited
	2) a:active MUST come after a:hover
	2. Text Decoration
	The text-decoration property is mostly used to remove underlines from links.
		a:link { text-decoration: none; }
	3. Background Color
	The background-color property can be used to specify a background color for links.
		a:link { background-color: yellow; }
	4. Link Buttons
	Several CSS properties must be combined to display links as boxes/buttons:
		a:link, a:visited { background-color: #f44336; color: white; padding: 14px 25px; text-align: center; text-decoration: none; display: inline-block; }
		a:hover, a:active { background-color: red; }
list
	In HTML, there are two main types of lists:
	1) unordered lists (<ul>) - the list items are marked with bullets
	2) ordered lists (<ol>) - the list items are marked with numbers or letters
	The CSS list properties allow you to:
	1) Set different list item markers for ordered lists
	2) Set different list item markers for unordered lists
	3) Set an image as the list item marker
	4) Add background colors to lists and list items
	1. List Item Markers
	The list-style-type property specifies the type of list item marker.
		ul.a { list-style-type: circle; }
		ul.b { list-style-type: square; }
		ol.c { list-style-type: upper-roman; }
		ol.d { list-style-type: lower-alpha; }
	The list-style-image property specifies an image as the list item marker.
		ul { list-style-image: url('sqpurple.gif'); }
	The list-style-position property specifies whether the list-item markers should appear inside or outside the content flow.
		ul { list-style-position: inside; }
	2. Shorthand property
	The list-style property is a shorthand property. It is used to set all the list properties in one declaration.
		ul { list-style: square inside url("sqpurple.gif"); }
	The order of the property values are:
	1) list-style-type (if a list-style-image is specified, the value of this property will be displayed if the image for some reason cannot be displayed)
	2) list-style-position (specifies whether the list-item markers should appear inside or outside the content flow)
	3) list-style-image (specifies an image as the list item marker)
	If one of the property values above are missing, the default value for the missing property will be inserted, if any.
	3. Styling List With Colors
	We can also style lists with colors, to make them look a little more interesting. Anything added to the <ol> or <ul> tag, affects the entire list, while properties added to the <li> tag will affect the individual list items.
		ol { background: #ff9999; padding: 20px; }
		ol li { background: #ffe5e5; padding: 5px; margin-left: 35px; }
		ul { background: #3399ff; padding: 20px; }
		ul li { background: #cce5ff; margin: 5px; }
table
	1. Table Borders
	To specify table borders in CSS, use the border property.
		table, th, td { border: 1px solid black; }
	The border-collapse property sets whether the table borders should be collapsed into a single border.
		table { border-collapse: collapse; }
	For a border around the table, only specify the border property for <table>.
		table { border: 1px solid black; }
	2. Table Width and Height
	Width and height of a table are defined by the width and height properties.
		table { width: 100%; }
		th { height: 50px; }
	3. Alignment
	The text-align property sets the horizontal alignment (like left, right, or center) of the content in <th> or <td>. By default, the content of <th> elements are center-aligned and the content of <td> elements are left-aligned.
		th { text-align: left; }
	The vertical-align property sets the vertical alignment (like top, bottom, or middle) of the content in <th> or <td>. By default, the vertical alignment of the content in a table is middle (for both <th> and <td> elements).
		td { height: 50px; vertical-align: bottom; }
	4. Table Padding
	To control the space between the border and the content in a table, use the padding property on <td> and <th> elements.
		th, td { padding: 15px; text-align: left; }
	5. Horizontal Dividers
	Add the border-bottom property to <th> and <td> for horizontal dividers.
		th, td { border-bottom: 1px solid #ddd; }
	6. Hoverable Table
	Use the :hover selector on <tr> to highlight table rows on mouse over.
		tr:hover { background-color: #f5f5f5 }
	7. Striped Tables
	For zebra-striped tables, use the nth-child() selector and add a background-color to all even (or odd) table rows.
		tr:nth-child(even) { background-color: #f2f2f2 }
	8. Table Color
	You can specify the background color and text color of <th> elements.
		th { background-color: #4CAF50; color: white; }
	9. Responsive Table
	A responsive table will display a horizontal scroll bar if the screen is too small to display the full content. Add a container element (like <div>) with overflow-x:auto around the <table> element to make it responsive.
		<div style="overflow-x:auto;"> <table></table> </div>
display
	The display property is the most important CSS property for controlling layout. It specifies if/how an element is displayed.
	Every HTML element has a default display value depending on what type of element it is. The default display value for most elements is block or inline.
	1. Block-level Elements
	A block-level element always starts on a new line and takes up the full width available (stretches out to the left and right as far as it can).
	Examples of block-level elements: <div>, <h1> - <h6>, <p>, <form>, <header>, <footer>, <section>
	2. Inline Elements
	An inline element does not start on a new line and only takes up as much width as necessary.
	Examples of inline elements: <span>, <a>, <img>
	3. Display: none;
	display: none; is commonly used with JavaScript to hide and show elements without deleting and recreating them. The <script> element use display: none; as its default.
	4. Override The Default Display Value
	Changing an inline element to a block element, or vice versa, can be useful for making the page look a specific way, and still follow the web standards.
		/* making inline <li> elements for horizontal menus */ li { display: inline; }
	Note: Setting the display property of an element only changes how the element is displayed, NOT what kind of element it is. So, an inline element with display: block; is not allowed to have other block elements inside it.
	5. Hide an Element - display:none or visibility:hidden?
	Hiding an element can be done by setting the display property to none. The element will be hidden, and the page will be displayed as if the element is not there.
		h1.hidden { display: none; }
	visibility:hidden; also hides an element. However, the element will still take up the same space as before. The element will be hidden, but still affect the layout!
		h1.hidden { visibility: hidden; }
max-width
	A block-level element always takes up the full width available (stretches out to the left and right as far as it can). Setting the width of a block-level element will prevent it from stretching out to the edges of its container. Then, you can set the margins to auto, to horizontally center the element within its container. The element will take up the specified width, and the remaining space will be split equally between the two margins.
	Using max-width will improve the browser's handling of small windows. This is important when making a site usable on small devices.
		div.ex1 { width: 500px; margin: auto; border: 3px solid #73AD21; }
		div.ex2 { max-width: 500px; margin: auto; border: 3px solid #73AD21; }
position
	1. The position property
	The position property specifies the type of positioning method used for an element.
	There are four different position values: static, relative, fixed, absolute.
	1) position: static;
	HTML elements are positioned static by default. Static positioned elements are not affected by the top, bottom, left, and right properties. An element with position: static; is not positioned in any special way; it is always positioned according to the normal flow of the page.
		div.static { position: static; border: 3px solid #73AD21; }
	Elements are then positioned using the top, bottom, left, and right properties. However, these properties will not work unless the position property is set first. They also work differently depending on the position value.
	2) position: relative;
	An element with position: relative; is positioned relative to its normal position. Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the element.
		div.relative { position: relative; left: 30px; border: 3px solid #73AD21; }
	3) position: fixed;
	An element with position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element. A fixed element does not leave a gap in the page where it would normally have been located.
		div.fixed { position: fixed; bottom: 0; right: 0; width: 300px; border: 3px solid #73AD21; }
	4) position: absolute;
	An element with position: absolute; is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed). However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.
	Note: A "positioned" element is one whose position is anything except static.
		div.relative { position: relative; width: 400px; height: 200px; border: 3px solid #73AD21; }
		div.absolute { position: absolute; top: 80px; right: 0; width: 200px; height: 100px; border: 3px solid #73AD21; }
	2. Overlapping Elements
	When elements are positioned, they can overlap other elements. The z-index property specifies the stack order of an element (which element should be placed in front of, or behind, the others). An element can have a positive or negative stack order. An element with greater stack order is always in front of an element with a lower stack order.
		img { position: absolute; left: 0px; top: 0px; z-index: -1; }
	Note: If two positioned elements overlap without a z-index specified, the element positioned last in the HTML code will be shown on top.
overflow 
	overflow property specifies whether to clip content or to add scrollbars when the content of an element is too big to fit in a specified area.
	Note: The overflow property only works for block elements with a specified height.
	The overflow property has the following values: visible (default), hidden, scroll, auto.
	1) Visible. By default, the overflow is visible, meaning that it is not clipped and it renders outside the element's box.
		div { width: 200px; height: 50px; background-color: #eee; overflow: visible; }
	2) Hidden. With the hidden value, the overflow is clipped, and the rest of the content is hidden.
		div { overflow: hidden; }
	3) Scroll. Setting the value to scroll, the overflow is clipped and a scrollbar is added to scroll inside the box. Note that this will add a scrollbar both horizontally and vertically (even if you do not need it).
		div { overflow: scroll; }
	4) Auto. The auto value is similar to scroll, only it add scrollbars when necessary.
		div { overflow: auto; }
	The overflow-x and overflow-y properties specifies whether to change the overflow of content just horizontally or vertically (or both):
	1) overflow-x specifies what to do with the left/right edges of the content.
	2) overflow-y specifies what to do with the top/bottom edges of the content.
		div { overflow-x: hidden; /* Hide horizontal scrollbar */ overflow-y: scroll; /* Add vertical scrollbar */ }
float
	The float property specifies whether or not an element should float. In its simplest use, the float property can be used to wrap text around images.
		img { float: right; margin: 0 0 10px 10px; }
	The clear property is used to control the behavior of floating elements. Elements after a floating element will flow around it. To avoid this, use the clear property. The clear property specifies on which sides of an element floating elements are not allowed to float
		div { clear: left; }
	The clearfix Hack - overflow: auto;
	If an element is taller than the element containing it, and it is floated, it will overflow outside of its container. Then we can add overflow: auto; to the containing element to fix this problem.
		.clearfix { overflow: auto; }
inline-block
	inline-block is like inline but it can have a width and a height.
		.floating-box { display: inline-block; width: 150px; height: 75px; margin: 10px; border: 3px solid #73AD21; }
align
	1. Center Align Elements.
	To horizontally center a block element (like <div>), use margin: auto; Setting the width of the element will prevent it from stretching out to the edges of its container. The element will then take up the specified width, and the remaining space will be split equally between the two margins.
		.center { margin: auto; width: 50%; border: 3px solid green; padding: 10px; }
	Note: Center aligning has no effect if the width property is not set (or set to 100%).
	2. Center Align Text.
	To just center the text inside an element, use text-align: center;
		.center { text-align: center; border: 3px solid green; }
	3. Center an Image.
	To center an image, use margin: auto; and make it into a block element.
		img { display: block; margin: auto; width: 40%; }
	4. Left and Right Align.
	1) position: absolute;
		.right { position: absolute; right: 0px; width: 300px; border: 3px solid #73AD21; padding: 10px; }
	Note: Absolute positioned elements are removed from the normal flow, and can overlap elements.
	2) float property
		.right { float: right; width: 300px; border: 3px solid #73AD21; padding: 10px; }
	5. Center Vertically.
	There are many ways to center an element vertically.
	1) top and bottom padding.
		.center { padding: 70px 0; border: 3px solid green; }
	2) To center both vertically and horizontally, use padding and text-align: center.
		.center { padding: 70px 0; border: 3px solid green; text-align: center; }
	3) line-height property with a value that is equal to the height property.
		.center { line-height: 200px; height: 200px; border: 3px solid green; text-align: center; }
		/* If the text has multiple lines, add the following: */
		.center p { line-height: 1.5; display: inline-block; vertical-align: middle; }
	4) positioning and the transform property.
		.center { height: 200px; position: relative; border: 3px solid green; }
		.center p { margin: 0; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); }
combinators
	A CSS selector can contain more than one simple selector. Between the simple selectors, we can include a combinator.
	There are four different combinators in CSS3: descendant selector (space), child selector (>), adjacent sibling selector (+), general sibling selector (~).
	1. Descendant Selector
	The descendant selector matches all elements that are descendants of a specified element.
		/* selecting all <p> elements inside <div> elements */ div p { background-color: yellow; }
	2. Child Selector
	The child selector selects all elements that are the immediate children of a specified element.
		/* selecting all <p> elements that are immediate children of a <div> element */ div > p { background-color: yellow; }
	3. Adjacent Sibling Selector
	The adjacent sibling selector selects all elements that are the adjacent siblings of a specified element. Sibling elements must have the same parent element, and "adjacent" means "immediately following".
		/* selecting all <p> elements that are placed immediately after <div> elements */ div + p { background-color: yellow; }
	4. General Sibling Selector
	The general sibling selector selects all elements that are siblings of a specified element.
		/* selecting all <p> elements that are siblings of <div> elements */ div ~ p { background-color: yellow; }
pseudo-class
	A pseudo-class is used to define a special state of an element.
	For example, it can be used to:
	1) Style an element when a user mouses over it;
	2) Style visited and unvisited links differently;
	3) Style an element when it gets focus;
	1. Syntax
	The syntax of pseudo-classes: selector:pseudo-class { property:value; }
		div:hover { background-color: blue; }
	Pseudo-classes can be combined with CSS classes.
		a.highlight:hover { color: #ff0000; }
		/* simple tooltip hover */ p { display: none; } div:hover p { display: block; }
	2. The :first-child Pseudo-class
	The :first-child pseudo-class matches a specified element that is the first child of another element.
		/* the selector matches any <p> element that is the first child of any element */ p:first-child { color: blue; }
	3. The :lang Pseudo-class
	The :lang pseudo-class allows you to define special rules for different languages.
pseudo-element
	A pseudo-element is used to style specified parts of an element.
	For example, it can be used to:
	1) Style the first letter, or line, of an element
	2) Insert content before, or after, the content of an element
	1. Syntax
	The syntax of pseudo-elements: selector::pseudo-element { property:value; }
	Pseudo-elements can be combined with CSS classes.
		p.intro::first-letter { color: #ff0000; font-size:200%; }
	Note: The double colon replaced the single-colon notation for pseudo-elements in CSS3 (::first-line versus :first-line).
	2. The ::first-line Pseudo-element
	The ::first-line pseudo-element is used to add a special style to the first line of a text.
		/* the first line of the text in all <p> elements */ p::first-line { color: #ff0000; font-variant: small-caps; }
	Note: The ::first-line pseudo-element can only be applied to block-level elements.
	The following properties apply to the ::first-line pseudo-element:
	1) font properties
	2) color properties
	3) background properties
	4) word-spacing
	5) letter-spacing
	6) text-decoration
	7) vertical-align
	8) text-transform
	9) line-height
	10) clear
	3. The ::first-letter Pseudo-element
	The ::first-letter pseudo-element is used to add a special style to the first letter of a text.
		/* formating the first letter of the text in all <p> elements */ p::first-letter { color: #ff0000; font-size: xx-large; }
	Note: The ::first-letter pseudo-element can only be applied to block-level elements.
	The following properties apply to the ::first-letter pseudo- element:
	1) font properties
	2) color properties 
	3) background properties
	4) margin properties
	5) padding properties
	6) border properties
	7) text-decoration
	8) vertical-align (only if "float" is "none")
	9) text-transform
	10) line-height
	11) float
	12) clear
	4. Multiple Pseudo-elements
	Several pseudo-elements can also be combined.
		p::first-letter { color: #ff0000; } p::first-line { font-variant: small-caps; }
	5. The ::before Pseudo-element
	The ::before pseudo-element can be used to insert some content before the content of an element.
		/* inserting an image before the content of each <h1> element */ h1::before { content: url(smiley.gif); }
	6. The ::after Pseudo-element
	The ::after pseudo-element can be used to insert some content after the content of an element.
		/* inserting an image after the content of each <h1> element */ h1::after { content: url(smiley.gif); }
	7. The ::selection Pseudo-element
	The ::selection pseudo-element matches the portion of an element that is selected by a user.
	This properties can be applied to ::selection: color, background, cursor, and outline.
		/* making the selected text red on a yellow background */ ::selection { color: red; background: yellow; }
opacity
	The opacity property specifies the opacity/transparency of an element. It can take a value from 0.0 - 1.0. The lower value, the more transparent.
	Note: IE8 and earlier use filter:alpha(opacity=x). The x can take a value from 0 - 100. A lower value makes the element more transparent.
		img { opacity: 0.5; filter: alpha(opacity=50); /* For IE8 and earlier */ }
	The opacity property is often used together with the :hover selector to change the opacity on mouse-over.
		img:hover { opacity: 1.0; filter: alpha(opacity=100); /* For IE8 and earlier */ }
navigation
	1. List of Links
	A navigation bar needs standard HTML as a base. For example we will build the navigation bar from a standard HTML list. A navigation bar is basically a list of links, so using the <ul> and <li> elements makes perfect sense.
	<ul>
	 <li><a href="default.asp">Home</a></li>
	 <li><a href="news.asp">News</a></li>
	 <li><a href="contact.asp">Contact</a></li>
	 <li><a href="about.asp">About</a></li>
	</ul>
	Removing the bullets and the margins and padding from the list.
	ul { list-style-type: none; margin: 0; padding: 0; }
	2. Vertical Navigation Bar
	To build a vertical navigation bar, you can style the <a> elements inside the list, in addition to the code above.
		li a { display: block; width: 60px; }
	Or you can also set the width of <ul>, and remove the width of <a>, as they will take up the full width available when displayed as block elements.
		ul { list-style-type: none; margin: 0; padding: 0; width: 60px; } li a { display: block; }
		/* Change the link color on hover */ li a:hover { background-color: #555; color: white; }
	1) Active/Current Navigation Link
	Add an "active" class to the current link to let the user know which page he/she is on.
		.active { background-color: #4CAF50; color: white; }
	2) Center Links & Add Borders
	Add text-align:center to <li> or <a> to center the links. Add the border property to <ul> add a border around the navbar. If you also want borders inside the navbar, add a border-bottom to all <li> elements, except for the last one.
		ul { border: 1px solid #555; } li { text-align: center; border-bottom: 1px solid #555; } li:last-child { border-bottom: none; }
	3) Full-height Fixed Vertical Navbar
	Create a full-height, "sticky" side navigation.
		ul { list-style-type: none; margin: 0; padding: 0; width: 25%; background-color: #f1f1f1; height: 100%; /* Full height */ position: fixed; /* Make it stick, even on scroll */ overflow: auto; /* Enable scrolling if the sidenav has too much content */ }
	Note: This might not work properly on mobile devices.
	3. Horizontal Navigation Bar
	There are two ways to create a horizontal navigation bar. Using inline or floating list items.
	1) Inline List Items
	One way to build a horizontal navigation bar is to specify the <li> elements as inline, in addition to the "standard" code above.
		li { display: inline; }
	2) Floating List Items
	Another way of creating a horizontal navigation bar is to float the <li> elements, and specify a layout for the navigation links.
		li { float: left; } a { display: block; padding: 8px; background-color: #dddddd; }
	Add the background-color to <ul> instead of each <a> element if you want a full-width background color:
		ul { background-color: #dddddd; }
dropdown
	1. Basic Dropdown
	Create a dropdown box that appears when the user moves the mouse over an element.
	.dropdown { position: relative; display: inline-block; }
	.dropdown-content { display: none; position: absolute; background-color: #f9f9f9; min-width: 160px; box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2); padding: 12px 16px; z-index: 1; }
	.dropdown:hover .dropdown-content { display: block; }
	<div class="dropdown"><span>Mouse over me</span><div class="dropdown-content"><p>Hello World!</p></div></div>
	2. Dropdown Menu
	Create a dropdown menu that allows the user to choose an option from a list.
	/* Style The Dropdown Button */ .dropbtn { background-color: #4CAF50; color: white; padding: 16px; font-size: 16px; border: none; cursor: pointer; }
	/* The container <div> - needed to position the dropdown content */ .dropdown { position: relative; display: inline-block; }
	/* Dropdown Content (Hidden by Default) */ .dropdown-content { display: none; position: absolute; background-color: #f9f9f9; min-width: 160px; box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2); }
	/* Links inside the dropdown */ .dropdown-content a { color: black; padding: 12px 16px; text-decoration: none; display: block; }
	/* Change color of dropdown links on hover */ .dropdown-content a:hover {background-color: #f1f1f1}
	/* Show the dropdown menu on hover */ .dropdown:hover .dropdown-content { display: block; }
	/* Change the background color of the dropdown button when the dropdown content is shown */ .dropdown:hover .dropbtn { background-color: #3e8e41; }
	<div class="dropdown"><button class="dropbtn">Dropdown</button><div class="dropdown-content"><a href="#">Link 1</a><a href="#">Link 2</a><a href="#">Link 3</a></div></div>
	If you want the dropdown menu to go from right to left, instead of left to right, add right: 0;
		.dropdown-content { right: 0; }
tooltip
	1. Basic Tooltip
	Create a tooltip that appears when the user moves the mouse over an element.
	/* Tooltip container */ .tooltip { position: relative; display: inline-block; border-bottom: 1px dotted black; }
	/* Tooltip text */ .tooltip .tooltiptext { visibility: hidden; width: 120px; background-color: black; color: #fff; text-align: center; padding: 5px 0; border-radius: 6px; position: absolute; z-index: 1; }
	/* Show the tooltip text when you mouse over the tooltip container */ .tooltip:hover .tooltiptext { visibility: visible; }
	<div class="tooltip">Hover over me<span class="tooltiptext">Tooltip text</span></div>
	2. Tooltip Arrows
	To create an arrow that should appear from a specific side of the tooltip, add "empty" content after tooltip, with the pseudo-element class ::after together with the content property. The arrow itself is created using borders. This will make the tooltip look like a speech bubble.
		.tooltip .tooltiptext::after { content: " "; position: absolute; top: 100%; /* At the bottom of the tooltip */ left: 50%; margin-left: -5px; border-width: 5px; border-style: solid; border-color: black transparent transparent transparent; }
	3. Fade In Tooltips (Animation)
	If you want to fade in the tooltip text when it is about to be visible, you can use the CSS3 transition property together with the opacity property, and go from being completely invisible to 100% visible, in a number of specified seconds.
		.tooltip .tooltiptext { opacity: 0; transition: opacity 1s; } .tooltip:hover .tooltiptext { opacity: 1; }
sprite
	An image sprite is a collection of images put into a single image. A web page with many images can take a long time to load and generates multiple server requests. Using image sprites will reduce the number of server requests and save bandwidth. With CSS, we can show just the part of the image we need.
		#home { width: 46px; height: 44px; background: url(img_navsprites.gif) 0 0; }
attribute
	It is possible to style HTML elements that have specific attributes or attribute values.
	1. CSS [attribute] Selector
	The [attribute] selector is used to select elements with a specified attribute.
		a[target] { background-color: yellow; }
	2. CSS [attribute="value"] Selector
	The [attribute="value"] selector is used to select elements with a specified attribute and value.
		a[target="_blank"] { background-color: yellow; }
	3. CSS [attribute~="value"] Selector
	The [attribute~="value"] selector is used to select elements with an attribute value containing a specified word.
		[title~="flower"] { border: 5px solid yellow; }
	4. CSS [attribute|="value"] Selector
	The [attribute|="value"] selector is used to select elements with the specified attribute starting with the specified value.
		[class|="top"] { background: yellow; }
	5. CSS [attribute^="value"] Selector
	The [attribute^="value"] selector is used to select elements whose attribute value begins with a specified value.
	Note: The value does not have to be a whole word!
		[class^="top"] { background: yellow; }
	6. CSS [attribute$="value"] Selector
	The [attribute$="value"] selector is used to select elements whose attribute value ends with a specified value.
	Note: The value does not have to be a whole word!
		[class$="test"] { background: yellow; }
	7. CSS [attribute*="value"] Selector
	The [attribute*="value"] selector is used to select elements whose attribute value contains a specified value.
	Note: The value does not have to be a whole word!
		[class*="te"] { background: yellow; }
form
	1. Styling Input Fields
	Use the width property to determine the width of the input field.
		input { width: 100%; }
	To style a specific input type, use attribute selectors:
	1) input[type=text] - will only select text fields;
	2) input[type=password] - will only select password fields;
	3) input[type=number] - will only select number fields;
	2. Padded Inputs
	Use the padding property to add space inside the text field.
	Tip: When you have many inputs after each other, you might also want to add some margin, to add more space outside of them.
		input[type=text] { width: 100%; padding: 12px 20px; margin: 8px 0; box-sizing: border-box; }
	3. Bordered Inputs
	Use the border property to change the border size and color, and use the border-radius property to add rounded corners.
		input[type=text] { border: 2px solid red; border-radius: 4px; }
	4. Colored Inputs
	Use the background-color property to add a background color to the input, and the color property to change the text color.
		input[type=text] { background-color: #3CBC8D; color: white; }
	5. Focused Inputs
	By default, some browsers will add a blue outline around the input when it gets focus (clicked on). To remove this behavior add outline: none; to the input. Use the :focus selector to do something with the input field when it gets focus.
		input[type=text]:focus { background-color: lightblue; }
		input[type=text]:focus { border: 3px solid #555; }
	6. Input with icon/image
	To add an icon inside the input, use the background-image property and position it with the background-position property. Also add a large left padding to reserve the space of the icon.
		input[type=text] { background-color: white; background-image: url('icon.png'); background-position: 10px 10px; background-repeat: no-repeat; padding-left: 40px; }
	7. Animated Search Input
	Use the CSS3 transition property to animate the width of the search input when it gets focus.
		input[type=text] { -webkit-transition: width 0.4s ease-in-out; transition: width 0.4s ease-in-out; }
		input[type=text]:focus { width: 100%; }
counter
	CSS counters are like "variables". The variable values can be incremented by CSS rules (which will track how many times they are used).
	Counters have the following properties:
	1) counter-reset - Creates or resets a counter;
	2) counter-increment - Increments a counter value;
	3) content - Inserts generated content;
	4) counter() or counters() function - Adds the value of a counter to an element;
	To use a CSS counter, it must first be created with counter-reset.
		body { counter-reset: section; } h2::before { counter-increment: section; content: "Section " counter(section) ": "; }
	1. Nesting Counters
		body { counter-reset: section; } h1 { counter-reset: subsection; } h1::before { counter-increment: section; content: "Section " counter(section) ". "; } h2::before { counter-increment: subsection; content: counter(section) "." counter(subsection) " "; }
	A counter can also be useful to make outlined lists because a new instance of a counter is automatically created in child elements.
		ol { counter-reset: section; list-style-type: none; } li::before { counter-increment: section; content: counters(section,".") " "; }
border-radius
	With CSS3, you can give any element "rounded corners", by using the border-radius property.
	Rounded corners for:
	1) an element with a specified background color.
		#rcorners1 { border-radius: 25px; background: #73AD21; padding: 20px; width: 200px; height: 150px; }
	2) an element with a border.
		#rcorners2 { border-radius: 25px; border: 2px solid #73AD21; padding: 20px; width: 200px; height: 150px; }
	3) an element with a background image.
		#rcorners3 { border-radius: 25px; background: url(paper.gif); background-position: left top; background-repeat: repeat; padding: 20px; width: 200px; height: 150px; }
	The border-radius property is a shorthand property for the border-top-left-radius, border-top-right-radius, border-bottom-right-radius and border-bottom-left-radius properties.
	Here are the rules:
	1) One value: all four corners are rounded equally;
	2) Two values: top-left and bottom-right corner, top-right and bottom-left corner;
	3) Three values: top-left, top-right and bottom-left, bottom-right;
	4) Four values: top-left, top-right, bottom-right, bottom-left corner;
border-image
	The CSS3 border-image property allows you to specify an image to be used instead of the normal border around an element.
	The property has three parts:
	1) The image to use as the border;
	2) Where to slice the image;
	3) Define whether the middle sections should be repeated or stretched;
	The border-image property takes the image and slices it into nine sections, like a tic-tac-toe board. It then places the corners at the corners, and the middle sections are repeated or stretched as you specify.
	Note: For border-image to work, the element also needs the border property set!
		#borderimg { border: 10px solid transparent; padding: 15px; border-image: url(border.png) 30 round; }
	The border-image property is a shorthand property for the border-image-source, border-image-slice, border-image-width, border-image-outset and border-image-repeat properties.
background
	CSS3 contains a few new background properties, which allow greater control of the background element.
	New CSS3 properties: background-size, background-origin, background-clip.
	CSS3 allows you to add multiple background images for an element, through the background-image property. The different background images are separated by commas, and the images are stacked on top of each other, where the first image is closest to the viewer.
		#example1 { background-image: url(img_flwr.gif), url(paper.gif); background-position: right bottom, left top; background-repeat: no-repeat, repeat; }
	Multiple background images can be specified using either the individual background properties or the background shorthand property.
		#example1 { background: url(img_flwr.gif) right bottom no-repeat, url(paper.gif) left top repeat; }
	The CSS3 background-size property allows you to specify the size of background images. Before CSS3, the size of a background image was the actual size of the image. CSS3 allows us to re-use background images in different contexts. The size can be specified in lengths, percentages, or by using one of the two keywords: contain or cover.
		#div1 { background: url(img_flower.jpg); background-size: 100px 80px; background-repeat: no-repeat; }
	The contain keyword scales the background image to be as large as possible (but both its width and its height must fit inside the content area). As such, depending on the proportions of the background image and the background positioning area, there may be some areas of the background which are not covered by the background image.
		#div1 { background: url(img_flower.jpg); background-size: contain; background-repeat: no-repeat; }
	The cover keyword scales the background image so that the content area is completely covered by the background image (both its width and height are equal to or exceed the content area). As such, some parts of the background image may not be visible in the background positioning area.
		#div2 { background: url(img_flower.jpg); background-size: cover; background-repeat: no-repeat; }
	The background-size property also accepts multiple values for background size (using a comma-separated list), when working with multiple backgrounds.
		#example1 { background: url(img_flwr.gif) left top no-repeat, url(img_flwr.gif) right bottom no-repeat, url(paper.gif) left top repeat; background-size: 50px, 130px, auto; }
	Full Size Background Image. It covers the entire browser window at all times.
		html { background: url(img_flower.jpg) no-repeat center fixed; background-size: cover; }
background-origin
	The CSS3 background-origin property specifies where the background image is positioned.
	It takes three different values:
	1) border-box - the background image starts from the upper left corner of the border;
	2) padding-box - (default) the background image starts from the upper left corner of the padding edge;
	3) content-box - the background image starts from the upper left corner of the content;
		#example1 { border: 10px solid black; padding: 35px; background: url(img_flwr.gif); background-repeat: no-repeat; background-origin: content-box; }
background-clip
	The CSS3 background-clip property specifies the painting area of the background.
	It takes three different values:
	1) border-box - (default) the background is painted to the outside edge of the border;
	2) padding-box - the background is painted to the outside edge of the padding;
	3) content-box - the background is painted within the content box;
		#example1 { border: 10px dotted black; padding: 35px; background: yellow; background-clip: content-box; }
gradient
	CSS3 gradients let you display smooth transitions between two or more specified colors.
	CSS3 defines two types of gradients: Linear Gradients (goes down/up/left/right/diagonally), Radial Gradients (defined by their center).
	1) Linear Gradients.
	To create a linear gradient you must define at least two color stops. Color stops are the colors you want to render smooth transitions among. You can also set a starting point and a direction (or an angle) along with the gradient effect.
	Syntax: background: linear-gradient(direction, color-stop1, color-stop2, ...);
		#grad { background: red; /* For browsers that do not support gradients */ background: linear-gradient(red, yellow); }
		#grad { background: linear-gradient(to right, red , yellow); }
		#grad { background: linear-gradient(to bottom right, red, yellow); }
		#grad { background: linear-gradient(red, yellow, green); /* Multiple Color Stops */ }
		#grad { background: linear-gradient(to right, red,orange,yellow,green,blue,indigo,violet); }
	If you want more control over the direction of the gradient, you can define an angle, instead of the predefined directions (to bottom, to top, to right, to left, to bottom right, etc.).
		#grad { background: linear-gradient(-90deg, red, yellow); }
	CSS3 gradients also support transparency, which can be used to create fading effects.
		#grad { background: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1)); }
	The repeating-linear-gradient() function is used to repeat linear gradients.
		#grad { background: repeating-linear-gradient(red, yellow 10%, green 20%); }
	2) Radial Gradients
	A radial gradient is defined by its center. To create a radial gradient you must also define at least two color stops.
	Syntax: background: radial-gradient(shape size at position, start-color, ..., last-color);
		#grad { background: red; /* For browsers that do not support gradients */ background: radial-gradient(red, yellow, green); }
		#grad { background: radial-gradient(red 5%, yellow 15%, green 60%); }
		#grad { background: radial-gradient(circle, red, yellow, green); }
	The size parameter defines the size of the gradient. It can take four values: closest-side, farthest-side, closest-corner, farthest-corner.
		#grad1 { background: radial-gradient(closest-side at 60% 55%, red, yellow, black); }
		#grad2 { background: radial-gradient(farthest-side at 60% 55%, red, yellow, black); }
	The repeating-radial-gradient() function is used to repeat radial gradients.
		#grad { background: repeating-radial-gradient(red, yellow 10%, green 15%); }
shadow
	With CSS3 you can add shadow to text and to elements. The following properties are available: text-shadow, box-shadow.
	1) text-shadow
	It applies shadow to text.
		h1 { text-shadow: 2px /* horizontal */ 2px /* vertical */ 5px /* blur */ red /* color */; }
	To add more than one shadow to the text, you can add a comma-separated list of shadows.
		h1 { text-shadow: 0 0 3px #FF0000, 0 0 5px #0000FF; }
	2) box-shadow
	It applies shadow to elements.
		div { box-shadow: 10px 10px 5px grey; }
		div.card { width: 250px; box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); text-align: center; }
transform
	CSS3 transforms allow you to translate, rotate, scale, and skew elements.
	A transformation is an effect that lets an element change shape, size and position. CSS3 supports 2D and 3D transformations.
	1. CSS3 2D Transforms
	2D transformation methods: translate(), rotate(), scale(), skewX(), skewY(), matrix().
	1) translate()
	It moves an element from its current position (according to the parameters given for the X-axis and the Y-axis).
		div { transform: translate(50px, 100px); }
	2) rotate()
	It rotates an element clockwise or counter-clockwise according to a given degree.
		div { transform: rotate(20deg); }
	3) scale()
	It increases or decreases the size of an element (according to the parameters given for the width and height).
		div { transform: scale(2, 3); }
	4) skew(), skewX(), skewY()
	They skew an element along the X or Y-axis by the given angle.
		div { transform: skew(20deg, 10deg); }
		div { transform: skewX(20deg); }
	5) matrix()
	It combines all the 2D transform methods into one.
		div { transform: matrix(1, -0.3, 0, 1, 0, 0); }
	2. CSS3 3D Transforms
	3D transformation methods: rotateX(), rotateY(), rotateZ(). They rotate an element around its X, Y or Z-axis at a given degree.
		div { transform: rotateX(150deg); }
transition
	CSS3 transitions allows to change property values smoothly (from one value to another), over a given duration.
	To create a transition effect, you must specify two things:
	1) the CSS property(ies) you want to add an effect to;
	2) the duration of the effect(s)
	The transition effect will start when the specified CSS property (width) changes value.
		div { width: 100px; height: 100px; background: red; transition: width 2s; } div:hover { width: 300px; }
	transition is a shorthand property for: transition-property, transition-duration, transition-timing-function and transition-delay.
	Note: If the duration part is not specified, the transition will have no effect, because the default value is 0.
	transition-timing-function
	specifies the speed curve of the transition effect. It can have the following values:
	1) ease - specifies a transition effect with a slow start, then fast, then end slowly (this is default);
	2) linear - specifies a transition effect with the same speed from start to end;
	3) ease-in - specifies a transition effect with a slow start;
	4) ease-out - specifies a transition effect with a slow end;
	5) ease-in-out - specifies a transition effect with a slow start and end;
	6) cubic-bezier(n,n,n,n) - lets you define your own values in a cubic-bezier function.
		#div3 {transition-timing-function: ease-in;}
	transition-delay
	specifies a delay (in seconds) for the transition effect.
		div { transition-delay: 1s; }
animation
	An animation lets an element gradually change from one style to another.
	To use CSS3 animation, you must first specify some keyframes for the animation. Keyframes hold what styles the element will have at certain times.
		@keyframes example { from {background-color: red;} to {background-color: yellow;} }
		div { width: 100px; height: 100px; background-color: red; animation-name: example; animation-duration: 4s; }
	Note: If the animation-duration property is not specified, the animation will have no effect, because the default value is 0.
	It is also possible to use percent. By using percent, you can add as many style changes as you like.
		@keyframes example { 0% {background-color: red;} 25% {background-color: yellow;} 50% {background-color: blue;} 100% {background-color: green;} }
	animation-delay property specifies a delay for the start of an animation.
		div { animation-name: example; animation-duration: 4s; animation-delay: 2s; }
	animation-iteration-count property specifies the number of times an animation should run. Use the value "infinite" to make the animation continue for ever.
		div { animation-iteration-count: 3; }
		div { animation-iteration-count: infinite; }
	animation-direction property is used to let an animation run in reverse direction or alternate cycles.
		div { animation-direction: reverse; }
		div { animation-direction: alternate; }
	animation-timing-function property specifies the speed curve of the animation. It can have the following values:
	1) ease - specifies an animation with a slow start, then fast, then end slowly (this is default);
	2) linear - specifies an animation with the same speed from start to end;
	3) ease-in - specifies an animation with a slow start;
	4) ease-out - specifies an animation with a slow end;
	5) ease-in-out - specifies an animation with a slow start and end;
	6) cubic-bezier(n,n,n,n) - lets you define your own values in a cubic-bezier function;
		#div {animation-timing-function: ease-in-out;}
	animation is a shorthand property for animation effects.
		div { animation: example 5s linear 2s infinite alternate; }
filter
	The CSS3 filter property adds visual effects (like blur and saturation) to an element.
		img { filter: grayscale(100%); }
	Filter Functions:  none, blur(), brightness(), contrast(), drop-shadow(), grayscale(), hue-rotate(), invert(), opacity(), saturate(), sepia(), url();
button
	Button styling: background-color, border, border-radius, color, padding, text-align, text-decoration, display, font-size;
	:hover selector is used to change the style of a button when you move the mouse over it.
	Tip: Use the transition-duration property to determine the speed of the "hover" effect.
	box-shadow property is used to add shadows to a button.
		.button1 { box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19); }
		.button2:hover { box-shadow: 0 12px 16px 0 rgba(0,0,0,0.24), 0 17px 50px 0 rgba(0,0,0,0.19); }
	opacity property is used to add transparency to a button (creates a "disabled" look).
	Tip: add the cursor property with a value of "not-allowed", which will display a "no parking sign" when you mouse over the button.
		.disabled { opacity: 0.6; cursor: not-allowed; }
	width property is used to change the width of a button.
		.button1 {width: 250px;}
	float:left is used to create a button group.
		.button { float: left; border: 1px solid green }
box-sizing
	The CSS3 box-sizing property allows us to include the padding and border in an element's total width and height.
		* { box-sizing: border-box; }
flexbox
	Flexible boxes, or flexbox, is a new layout mode in CSS3.
	Use of flexbox ensures that elements behave predictably when the page layout must accommodate different screen sizes and different display devices. For many applications, the flexible box model provides an improvement over the block model in that it does not use floats, nor do the flex container's margins collapse with the margins of its contents.
	1. Flexbox Concepts
	Flexbox consists of flex containers and flex items.
	A flex container is declared by setting the display property of an element to either flex (rendered as a block) or inline-flex (rendered as inline). Inside a flex container there is one or more flex items.
	Note: Everything outside a flex container and inside a flex item is rendered as usual. Flexbox defines how flex items are laid out inside a flex container.
	Flex items are positioned inside a flex container along a flex line. By default there is only one flex line per flex container.
		.flex-container { display: flex; width: 200px; height: 250px; background-color: lightgrey; }
		.flex-item { background-color: cornflowerblue; width: 100px; height: 100px; margin: 10px; }
	2. flex-direction
	The flex-direction property specifies the direction of the flexible items inside the flex container.
	Values:
	1) left-to-right, top-to-bottom (default);
	2) row-reverse - If the writing-mode (direction) is left to right, the flex items will be laid out right to left;
	3) column - If the writing system is horizontal, the flex items will be laid out vertically;
	4) column-reverse - Same as column, but reversed;
	3. justify-content
	The justify-content property horizontally aligns the flexible container's items when the items do not use all available space on the main-axis.
	Values:
	1) flex-start - Default value. Items are positioned at the beginning of the container;
	2) flex-end - Items are positioned at the end of the container;
	3) center - Items are positioned at the center of the container;
	4) space-between - Items are positioned with space between the lines;
	5) space-around - Items are positioned with space before, between, and after the lines;
	4. align-items
	The align-items property vertically aligns the flexible container's items when the items do not use all available space on the cross-axis.
	Values:
	1) stretch - Default value. Items are stretched to fit the container;
	2) flex-start - Items are positioned at the top of the container;
	3) flex-end - Items are positioned at the bottom of the container;
	4) center - Items are positioned at the center of the container (vertically);
	5) baseline - Items are positioned at the baseline of the container;
	5. flex-wrap
	The flex-wrap property specifies whether the flex items should wrap or not, if there is not enough room for them on one flex line.
	Values:
	1) nowrap - Default value. The flexible items will not wrap;
	2) wrap - The flexible items will wrap if necessary;
	3) wrap-reverse - The flexible items will wrap, if necessary, in reverse order;
	6. align-content
	The align-content property modifies the behavior of the flex-wrap property. It is similar to align-items, but instead of aligning flex items, it aligns flex lines.
	Values:
	1) stretch - Default value. Lines stretch to take up the remaining space;
	2) flex-start - Lines are packed toward the start of the flex container;
	3) flex-end - Lines are packed toward the end of the flex container;
	4) center - Lines are packed toward the center of the flex container;
	5) space-between - Lines are evenly distributed in the flex container;
	6) space-around - Lines are evenly distributed in the flex container, with half-size spaces on either end;
	7. Flex Item Properties
	Values: order, margin, align-self, flex.
media
	The @media rule, introduced in CSS2, made it possible to define different style rules for different media types. You could have one set of style rules for computer screens, one for printers, one for handheld devices, one for television-type devices, and so on.
	Note: Unfortunately these media types never got a lot of support by devices, other than the print media type.
	Media queries in CSS3 extend the CSS2 media types idea: Instead of looking for a type of device, they look at the capability of the device.
	Media queries can be used to check many things, such as: width and height of the viewport, width and height of the device, orientation (is the tablet/phone in landscape or portrait mode?), resolution.
	Syntax: A media query consists of a media type and can contain one or more expressions, which resolve to either true or false.
		@media not|only mediatype and (expressions) { CSS-Code; }
	The result of the query is true if the specified media type matches the type of device the document is being displayed on and all expressions in the media query are true. When a media query is true, the corresponding style sheet or style rules are applied, following the normal cascading rules. Unless you use the not or only operators, the media type is optional and the all type will be implied.
	You can also have different stylesheets for different media.
		<link rel="stylesheet" media="mediatype and|not|only (expressions)" href="print.css">
	CSS3 Media Types:
	1) all; Used for all media type devices;
	2) print; Used for printers;
	3) screen; Used for computer screens, tablets, smart-phones etc.;
	4) speech; Used for screenreaders that "reads" the page out loud;
		@media screen and (min-width: 480px) { body { background-color: lightgreen; } }
		@media screen and (min-width: 480px) { #leftsidebar {width: 200px; float: left;} #main {margin-left:216px;} }
		@media screen and (max-width: 699px) and (min-width: 520px) { ul li a { padding-left: 30px; background: url(email-icon.png) left center no-repeat; } }
		@media screen and (max-width: 1000px) and (min-width: 700px) { ul li a:before { content: "Email: "; font-style: italic; color: #666666; } }
