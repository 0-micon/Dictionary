delimiters
	When using the PCRE functions, it is required that the pattern is enclosed by delimiters.
	A delimiter can be any non-alphanumeric, non-backslash, non-whitespace character.
		!"#$%&'*+,./:;=?@^_`|~-
		({[<>]})
	Often used delimiters are forward slashes (/), hash signs (#) and tildes (~).
		/foo bar/
		#^[^0-9]$#
		+php+
		%[a-zA-Z0-9_-]%
	It is also possible to use bracket style delimiters where the opening and closing brackets are the starting and ending delimiter, respectively.
	(), {}, [] and <> are all valid bracket style delimiter pairs.
		(this [is] a (pattern))
		{this [is] a (pattern)}
		[this [is] a (pattern)]
		<this [is] a (pattern)>
	Bracket style delimiters do not need to be escaped when they are used as meta characters within the pattern, but as with other delimiters they must be escaped when they are used as literal characters.
	If the delimiter needs to be matched inside the pattern it must be escaped using a backslash (\).
	You may add pattern modifiers after the ending delimiter. The following is an example of case-insensitive matching:
		#[a-z]#i
meta-character
	 The power of regular expressions comes from the ability to include alternatives and repetitions in the pattern. These are encoded in the pattern by the use of meta-characters, which do not stand for themselves but instead are interpreted in some special way.
	 There are two different sets of meta-characters: those that are recognized anywhere in the pattern except within square brackets, and those that are recognized in square brackets.
	1) Outside square brackets, the meta-characters are as follows:
	 \	general escape character with several uses;
	 ^	assert start of subject (or line, in multiline mode);
	 $	assert end of subject or before a terminating newline (or end of line, in multiline mode);
	 .	match any character except newline (by default);
	 [	start character class definition;
	 ]	end character class definition;
	 |	start of alternative branch;
	 (	start subpattern;
	 )	end subpattern;
	 ?	extends the meaning of '(', also 0 or 1 quantifier, also makes greedy quantifiers lazy (see repetition);
	 *	0 or more quantifier;
	 +	1 or more quantifier;
	 {	start min/max quantifier;
	 }	end min/max quantifier;
	 2) Part of a pattern that is in square brackets is called a character class. In a character class the only meta-characters are:
	 \	general escape character;
	 ^	negate the class, but only if the first character;
	 -	indicates character range, but only if not the first character;
escape sequences
	The backslash character (\) has several uses.
	1) If it is followed by a non-alphanumeric character, it takes away any special meaning that character may have. This use of backslash as an escape character applies both inside and outside character classes. For example, if you want to match a "*" character, you write "\*" in the pattern. This applies whether or not the following character would otherwise be interpreted as a meta-character, so it is always safe to precede a non-alphanumeric with "\" to specify that it stands for itself. In particular, if you want to match a backslash, you write "\\".
	2) A second use of backslash provides a way of encoding non-printing characters in patterns in a visible manner. There is no restriction on the appearance of non-printing characters, apart from the binary zero that terminates a pattern, but when a pattern is being prepared by text editing, it is usually easier to use one of the following escape sequences than the binary character it represents:
	 \a	alarm, that is, the BEL character (hex 07);
	 \cx	"control-x", where x is any character;
	 \e	escape (hex 1B);
	 \f	formfeed (hex 0C);
	 \n	newline (hex 0A);
	 \p{xx}	a character with the xx property, see unicode properties for more info;
	 \P{xx}	a character without the xx property, see unicode properties for more info;
	 \r	carriage return (hex 0D);
	 \R	line break: matches \n, \r and \r\n;
	 \t	tab (hex 09);
	 \xhh	character with hex code hh;
	 \ddd	character with octal code ddd, or backreference;
	All the sequences that define a single byte value can be used both inside and outside character classes. In addition, inside a character class, the sequence "\b" is interpreted as the backspace character (hex 08). Outside a character class it has a different meaning (see below).
	3) The third use of backslash is for specifying generic character types:
	 \d	any decimal digit;
	 \D	not a decimal digit;
	 \h	any horizontal whitespace character (since PHP 5.2.4);
	 \H	not a horizontal whitespace character (since PHP 5.2.4);
	 \s	any whitespace character;
	 \S	not a whitespace character;
	 \v	any vertical whitespace character (since PHP 5.2.4);
	 \V	not a vertical whitespace character (since PHP 5.2.4);
	 \w	any "word" character;
	 \W	any "non-word" character;
	4) The fourth use of backslash is for certain simple assertions. An assertion specifies a condition that has to be met at a particular point in a match, without consuming any characters from the subject string. The use of subpatterns for more complicated assertions is described below. The backslashed assertions are:
	 \b	word boundary;
	 \B	not a word boundary;
	 \A	start of subject (independent of multiline mode);
	 \Z	end of subject or newline at end (independent of multiline mode);
	 \z	end of subject (independent of multiline mode);
	 \G	first matching position in subject;
	These assertions may not appear in character classes (but note that "\b" has a different meaning, namely the backspace character, inside a character class).
	A word boundary is a position in the subject string where the current character and the previous character do not both match \w or \W (i.e. one matches \w and the other matches \W), or the start or end of the string if the first or last character matches \w, respectively.
	The \A, \Z, and \z assertions differ from the traditional circumflex and dollar (described in anchors ) in that they only ever match at the very start and end of the subject string, whatever options are set. They are not affected by the PCRE_MULTILINE or PCRE_DOLLAR_ENDONLY options. The difference between \Z and \z is that \Z matches before a newline that is the last character of the string as well as at the end of the string, whereas \z matches only at the end.
	The \G assertion is true only when the current matching position is at the start point of the match, as specified by the offset argument of preg_match(). It differs from \A when the value of offset is non-zero.
	\Q and \E can be used to ignore regexp metacharacters in the pattern. For example: \w+\Q.$.\E$ will match one or more word characters, followed by literals .$. and anchored at the end of the string.
	\K can be used to reset the match start since PHP 5.2.4. For example, the pattern foo\Kbar matches "foobar", but reports that it has matched "bar". The use of \K does not interfere with the setting of captured substrings. For example, when the pattern (foo)\Kbar matches "foobar", the first substring is still set to "foo".
anchor
	Anchors match a position before, after, or between characters.
	1. Start of String and End of String Anchors
	 ^ (caret)	matches the position before the first character in the string;
	 $	matches right after the last character in the string;
	A regex that consists solely of an anchor can only find zero-length matches.
	The meanings of the ^ (circumflex) and $ (dollar) characters are changed if the PCRE_MULTILINE option is set. When this is the case, they match immediately after and immediately before an internal "\n" character, respectively, in addition to matching at the start and end of the subject string. For example, the pattern /^abc$/ matches the subject string "def\nabc" in multiline mode, but not otherwise. Consequently, patterns that are anchored in single line mode because all branches start with "^" are not anchored in multiline mode. The PCRE_DOLLAR_ENDONLY option is ignored if PCRE_MULTILINE is set.
	2. Permanent Start of String and End of String Anchors
	 \A only ever matches at the start of the string;
	 \Z only ever matches at the end of the string;
	These two tokens never match at line breaks.
dot
	Outside a character class, a dot (.) in the pattern matches any one character in the subject, including a non-printing character, but not (by default) newline. If the PCRE_DOTALL option is set, then dots match newlines as well. The handling of dot is entirely independent of the handling of circumflex (^) and dollar ($), the only relationship being that they both involve newline characters.
	Dot has no special meaning in a character class.
	\C can be used to match single byte. It makes sense in UTF-8 mode where full stop matches the whole character which can consist of multiple bytes.
character classes
	An opening square bracket ([) introduces a character class, terminated by a closing square bracket (]). A closing square bracket on its own is not special. If a closing square bracket is required as a member of the class, it should be the first data character in the class (after an initial circumflex (^), if present) or escaped with a backslash (\).
	A character class matches a single character in the subject; the character must be in the set of characters defined by the class, unless the first character in the class is a circumflex (^), in which case the subject character must not be in the set defined by the class. If a circumflex is actually required as a member of the class, ensure it is not the first character, or escape it with a backslash.
		[aeiou] matches any lower case vowel
		[^aeiou] matches any character that is not a lower case vowel
	The minus (hyphen) character can be used to specify a range of characters in a character class.
		[d-m] matches any letter between d and m, inclusive
	If a minus character is required in a class, it must be escaped with a backslash or appear in a position where it cannot be interpreted as indicating a range, typically as the first or last character in the class.
	Ranges operate in ASCII collating sequence. They can also be used for characters specified numerically.
		[\000-\037]
	If a range that includes letters is used when case-insensitive (caseless) matching is set, it matches the letters in either case.
		[W-c] is equivalent to [][\^_`wxyzabc], matched case-insensitively, and if character tables for the "fr" locale are in use.
		[\xc8-\xcb] matches accented E characters in both cases
	The character types \d, \D, \s, \S, \w, \W may also appear in a character class, and add the characters that they match to the class.
		[\dABCDEF] matches any hexadecimal digit.
	A circumflex can be used with the upper case character types to specify a more restricted set of characters than the matching lower case type.
		[^\W_] matches any letter or digit, but not underscore.
	All non-alphanumeric characters other than \, -, ^ (at the start) and the terminating ] are non-special in character classes, but it does no harm if they are escaped. The pattern terminator is always special and must be escaped when used within an expression.
	PCRE supports the POSIX notation for character classes. This uses names enclosed by [: and :] within the enclosing square brackets.
		[01[:alpha:]%] matches "0", "1", any alphabetic character, or "%".
	The supported class names are:
	 alnum	letters and digits
	 alpha	letters
	 ascii	character codes 0 - 127
	 blank	space or tab only
	 cntrl	control characters
	 digit	decimal digits (same as \d)
	 graph	printing characters, excluding space
	 lower	lower case letters
	 print	printing characters, including space
	 punct	printing characters, excluding letters and digits
	 space	white space (not quite the same as \s)
	 upper	upper case letters
	 word	"word" characters (same as \w)
	 xdigit	hexadecimal digits
	The space characters are HT (9), LF (10), VT (11), FF (12), CR (13), and space (32). Notice that this list includes the VT character (code 11). This makes "space" different to \s, which does not include VT (for Perl compatibility).
	The name word is a Perl extension, and blank is a GNU extension from Perl 5.8. Another Perl extension is negation, which is indicated by a ^ character after the colon.
		[12[:^digit:]] matches "1", "2", or any non-digit.
	In UTF-8 mode, characters with values greater than 128 do not match any of the POSIX character classes. As of PHP 5.3.0 and libpcre 8.10 some character classes are changed to use Unicode character properties, in which case the mentioned restriction does not apply. Refer to the » PCRE(3) manual for details.
	Unicode character properties can appear inside a character class. They can not be part of a range. The minus (hyphen) character after a Unicode character class will match literally. Trying to end a range with a Unicode character property will result in a warning.
alternation
	Vertical bar characters (|) are used to separate alternative patterns.
		gilbert|sullivan matches either "gilbert" or "sullivan".
	Any number of alternatives may appear, and an empty alternative is permitted (matching the empty string). The matching process tries each alternative in turn, from left to right, and the first one that succeeds is used. If the alternatives are within a subpattern (defined below), "succeeds" means matching the rest of the main pattern as well as the alternative in the subpattern.
internal option setting
	The settings of PCRE_CASELESS, PCRE_MULTILINE, PCRE_DOTALL, PCRE_UNGREEDY, PCRE_EXTRA, PCRE_EXTENDED and PCRE_DUPNAMES can be changed from within the pattern by a sequence of Perl option letters enclosed between "(?" and ")".
	Option letters:
	 i 	for PCRE_CASELESS;
	 m 	for PCRE_MULTILINE;
	 s 	for PCRE_DOTALL;
	 x 	for PCRE_EXTENDED;
	 U 	for PCRE_UNGREEDY;
	 X 	for PCRE_EXTRA;
	 J 	for PCRE_INFO_JCHANGED;
		(?im) sets case-insensitive (caseless), multiline matching
	It is also possible to unset these options by preceding the letter with a hyphen, and a combined setting and unsetting.
		(?im-sx)
	When an option change occurs at top level (that is, not inside subpattern parentheses), the change applies to the remainder of the pattern that follows. So /ab(?i)c/ matches only "abc" and "abC".
	If an option change occurs inside a subpattern, the effect is different. This is a change of behaviour in Perl 5.005. An option change inside a subpattern affects only that part of the subpattern that follows it.
		(a(?i)b)c matches abc and aBc and no other strings (assuming PCRE_CASELESS is not used)
	By this means, options can be made to have different settings in different parts of the pattern. Any changes made in one alternative do carry on into subsequent branches within the same subpattern.
		(a(?i)b|c) matches "ab", "aB", "c", and "C", even though when matching "C" the first branch is abandoned before the option setting
	This is because the effects of option settings happen at compile time. There would be some very weird behaviour otherwise.
	The PCRE-specific options PCRE_UNGREEDY and PCRE_EXTRA can be changed in the same way as the Perl-compatible options by using the characters U and X respectively. The (?X) flag setting is special in that it must always occur earlier in the pattern than any of the additional features it turns on, even when it is at top level. It is best put at the start.
subpattern
	Subpatterns are delimited by parentheses (round brackets), which can be nested. Marking part of a pattern as a subpattern does two things:
	1. It localizes a set of alternatives.
		cat(aract|erpillar|) matches one of the words "cat", "cataract", or "caterpillar".
	2. It sets up the subpattern as a capturing subpattern (as defined above). When the whole pattern matches, that portion of the subject string that matched the subpattern is passed back to the caller via the ovector argument of pcre_exec(). Opening parentheses are counted from left to right (starting from 1) to obtain the numbers of the capturing subpatterns.
		((red|white) (king|queen)) for "the red king" the captured substrings are "red king", "red", and "king", and are numbered 1, 2, and 3.
	The fact that plain parentheses fulfill two functions is not always helpful. There are often times when a grouping subpattern is required without a capturing requirement. If an opening parenthesis is followed by "?:", the subpattern does not do any capturing, and is not counted when computing the number of any subsequent capturing subpatterns.
		((?:red|white) (king|queen)) for "the white queen" the captured substrings are "white queen" and "queen", and are numbered 1 and 2.
	The maximum number of captured substrings is 65535. It may not be possible to compile such large patterns, however, depending on the configuration options of libpcre.
	As a convenient shorthand, if any option settings are required at the start of a non-capturing subpattern, the option letters may appear between the "?" and the ":".
		(?i:saturday|sunday)
		(?:(?i)saturday|sunday)
	Sometimes it is necessary to have multiple matching, but alternating subgroups in a regular expression. Normally, each of these would be given their own backreference number even though only one of them would ever possibly match. To overcome this, the (?| syntax allows having duplicate numbers. Consider the following regex matched against the string Sunday:
	(?:(Sat)ur|(Sun))day
	Here Sun is stored in backreference 2, while backreference 1 is empty. Matching yields Sat in backreference 1 while backreference 2 does not exist. Changing the pattern to use the (?| fixes this problem:
	(?|(Sat)ur|(Sun))day
	Using this pattern, both Sun and Sat would be stored in backreference 1.
repetition
	 Repetition is specified by quantifiers, which can follow any of the following items:
	 1) a single character, possibly escaped;
	 2) the dot (.) metacharacter;
	 3) a character class;
	 4) a back reference;
	 5) a parenthesized subpattern (unless it is an assertion);
	The general repetition quantifier specifies a minimum and maximum number of permitted matches, by giving the two numbers in curly brackets (braces), separated by a comma. The numbers must be less than 65536, and the first must be less than or equal to the second.
		z{2,4} matches "zz", "zzz", or "zzzz".
	A closing brace on its own is not a special character. If the second number is omitted, but the comma is present, there is no upper limit; if the second number and the comma are both omitted, the quantifier specifies an exact number of required matches.
		[aeiou]{3,} matches at least 3 successive vowels, but may match many more;
		\d{8} matches exactly 8 digits.
	An opening curly bracket that appears in a position where a quantifier is not allowed, or one that does not match the syntax of a quantifier, is taken as a literal character. For example, {,6} is not a quantifier, but a literal string of four characters.
	The quantifier {0} is permitted, causing the expression to behave as if the previous item and the quantifier were not present.
	For convenience (and historical compatibility) the three most common quantifiers have single-character abbreviations:
	 1) * 	equivalent to {0,};
	 2) + 	equivalent to {1,};
	 3) ? 	equivalent to {0,1};
	It is possible to construct infinite loops by following a subpattern that can match no characters with a quantifier that has no upper limit.
		(a?)*
	By default, the quantifiers are "greedy", that is, they match as much as possible (up to the maximum number of permitted times), without causing the rest of the pattern to fail. The classic example of where this gives problems is in trying to match comments in C programs. These appear between the sequences /* and */ and within the sequence, individual * and / characters may appear. An attempt to match C comments by applying the pattern /\*.*\*/ to the string /* first comment */ not comment /* second comment */ fails, because it matches the entire string due to the greediness of the .* item.
	However, if a quantifier is followed by a question mark, then it becomes lazy, and instead matches the minimum number of times possible, so the pattern /\*.*?\*/ does the right thing with the C comments. The meaning of the various quantifiers is not otherwise changed, just the preferred number of matches. Do not confuse this use of question mark with its use as a quantifier in its own right. Because it has two uses, it can sometimes appear doubled, as in \d??\d which matches one digit by preference, but can match two if that is the only way the rest of the pattern matches.
	If the PCRE_UNGREEDY option is set (an option which is not available in Perl) then the quantifiers are not greedy by default, but individual ones can be made greedy by following them with a question mark. In other words, it inverts the default behaviour.
	Quantifiers followed by + are "possessive". They eat as many characters as possible and don't return to match the rest of the pattern. Thus .*abc matches "aabc" but .*+abc doesn't because .*+ eats the whole string. Possessive quantifiers can be used to speed up processing.
	When a parenthesized subpattern is quantified with a minimum repeat count that is greater than 1 or with a limited maximum, more store is required for the compiled pattern, in proportion to the size of the minimum or maximum.
	If a pattern starts with .* or .{0,} and the PCRE_DOTALL option (equivalent to Perl's /s) is set, thus allowing the . to match newlines, then the pattern is implicitly anchored, because whatever follows will be tried against every character position in the subject string, so there is no point in retrying the overall match at any position after the first. PCRE treats such a pattern as though it were preceded by \A. In cases where it is known that the subject string contains no newlines, it is worth setting PCRE_DOTALL when the pattern begins with .* in order to obtain this optimization, or alternatively using ^ to indicate anchoring explicitly.
	When a capturing subpattern is repeated, the value captured is the substring that matched the final iteration.
		(tweedle[dume]{3}\s*)+ has matched "tweedledum tweedledee" the value of the captured substring is "tweedledee".
	However, if there are nested capturing subpatterns, the corresponding captured values may have been set in previous iterations.
		/(a|(b))+/ matches "aba" the value of the second captured substring is "b".
back references
	Outside a character class, a backslash (\) followed by a digit greater than 0 is a back reference to a capturing subpattern earlier (i.e. to its left) in the pattern, provided there have been that many previous capturing left parentheses.
	However, if the decimal number following the backslash is less than 10, it is always taken as a back reference, and causes an error only if there are not that many capturing left parentheses in the entire pattern. In other words, the parentheses that are referenced need not be to the left of the reference for numbers less than 10. A "forward back reference" can make sense when a repetition is involved and the subpattern to the right has participated in an earlier iteration.
	A back reference matches whatever actually matched the capturing subpattern in the current subject string, rather than anything matching the subpattern itself. So the pattern (sens|respons)e and \1ibility matches "sense and sensibility" and "response and responsibility", but not "sense and responsibility". If case-sensitive (caseful) matching is in force at the time of the back reference, then the case of letters is relevant.
		((?i)rah)\s+\1 matches "rah rah" and "RAH RAH", but not "RAH rah".
	There may be more than one back reference to the same subpattern. If a subpattern has not actually been used in a particular match, then any back references to it always fail.
		(a|(bc))\2 always fails if it starts to match "a" rather than "bc".
	Because there may be up to 99 back references, all digits following the backslash are taken as part of a potential back reference number. If the pattern continues with a digit character, then some delimiter must be used to terminate the back reference. If the PCRE_EXTENDED option is set, this can be whitespace. Otherwise an empty comment can be used.
	A back reference that occurs inside the parentheses to which it refers fails when the subpattern is first used, so, for example, (a\1) never matches. However, such references can be useful inside repeated subpatterns.
		(a|b\1)+ matches any number of "a"s and also "aba", "ababba" etc.
	At each iteration of the subpattern, the back reference matches the character string corresponding to the previous iteration. In order for this to work, the pattern must be such that the first iteration does not need to match the back reference. This can be done using alternation, as in the example above, or by a quantifier with a minimum of zero.
	As of PHP 5.2.2, the \g escape sequence can be used for absolute and relative referencing of subpatterns. This escape sequence must be followed by an unsigned number or a negative number, optionally enclosed in braces. The sequences \1, \g1 and \g{1} are synonymous with one another. The use of this pattern with an unsigned number can help remove the ambiguity inherent when using digits following a backslash. The sequence helps to distinguish back references from octal characters and also makes it easier to have a back reference followed by a literal number, e.g. \g{2}1.
	The use of the \g sequence with a negative number signifies a relative reference.
		(foo)(bar)\g{-1} would match the sequence "foobarbar";
		(foo)(bar)\g{-2} matches "foobarfoo".
	This can be useful in long patterns as an alternative to keeping track of the number of subpatterns in order to reference a specific previous subpattern.
	Back references to the named subpatterns can be achieved by (?P=name) or, since PHP 5.2.2, also by \k<name> or \k'name'. Additionally PHP 5.2.4 added support for \k{name} and \g{name}, and PHP 5.2.7 for \g<name> and \g'name'.
assertion
	An assertion is a test on the characters following or preceding the current matching point that does not actually consume any characters.
	The simple assertions coded as \b, \B, \A, \Z, \z, ^ and $ are described in escape sequences.
	More complicated assertions are coded as subpatterns. There are two kinds: those that look ahead of the current position in the subject string, and those that look behind it.
	An assertion subpattern is matched in the normal way, except that it does not cause the current matching position to be changed.
	1) Lookahead assertions start with (?= for positive assertions and (?! for negative assertions.
		\w+(?=;) matches a word followed by a semicolon, but does not include the semicolon in the match;
		foo(?!bar) matches any occurrence of "foo" that is not followed by "bar".
	Note that the apparently similar pattern (?!foo)bar does not find an occurrence of "bar" that is preceded by something other than "foo"; it finds any occurrence of "bar" whatsoever, because the assertion (?!foo) is always TRUE when the next three characters are "bar". A lookbehind assertion is needed to achieve this effect.
	2) Lookbehind assertions start with (?<= for positive assertions and (?<! for negative assertions.
		(?<!foo)bar does find an occurrence of "bar" that is not preceded by "foo".
	The contents of a lookbehind assertion are restricted such that all the strings it matches must have a fixed length. However, if there are several alternatives, they do not all have to have the same fixed length. Thus (?<=bullock|donkey) is permitted, but (?<!dogs?|cats?) causes an error at compile time. Branches that match different length strings are permitted only at the top level of a lookbehind assertion. This is an extension compared with Perl 5.005, which requires all branches to match the same length of string. An assertion such as (?<=ab(c|de)) is not permitted, because its single top-level branch can match two different lengths, but it is acceptable if rewritten to use two top-level branches: (?<=abc|abde) The implementation of lookbehind assertions is, for each alternative, to temporarily move the current position back by the fixed width and then try to match. If there are insufficient characters before the current position, the match is deemed to fail. Lookbehinds in conjunction with once-only subpatterns can be particularly useful for matching at the ends of strings; an example is given at the end of the section on once-only subpatterns.
	Several assertions (of any sort) may occur in succession.
		(?<=\d{3})(?<!999)foo matches "foo" preceded by three digits that are not "999".
	Notice that each of the assertions is applied independently at the same point in the subject string. First there is a check that the previous three characters are all digits, then there is a check that the same three characters are not "999". This pattern does not match "foo" preceded by six characters, the first of which are digits and the last three of which are not "999". For example, it doesn't match "123abcfoo". A pattern to do that is (?<=\d{3}...)(?<!999)foo
	This time the first assertion looks at the preceding six characters, checking that the first three are digits, and then the second assertion checks that the preceding three characters are not "999".
	Assertions can be nested in any combination.
		(?<=(?<!foo)bar)baz matches an occurrence of "baz" that is preceded by "bar" which in turn is not preceded by "foo", while (?<=\d{3}...(?<!999))foo is another pattern which matches "foo" preceded by three digits and any three characters that are not "999".
	Assertion subpatterns are not capturing subpatterns, and may not be repeated, because it makes no sense to assert the same thing several times. If any kind of assertion contains capturing subpatterns within it, these are counted for the purposes of numbering the capturing subpatterns in the whole pattern. However, substring capturing is carried out only for positive assertions, because it does not make sense for negative assertions.
	Assertions count towards the maximum of 200 parenthesized subpatterns.
